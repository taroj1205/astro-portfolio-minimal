---
import { getCollection } from "astro:content"

const pathname = Astro.url.pathname
const path = pathname.split("/").slice(-1)[0]

const allPosts = await getCollection("blog")

const currentPost = allPosts.find(
  (post) => post.filePath?.split("/").pop()?.split(".").shift() === path,
)

function generateToc(content: string) {
  const headingRegex = /^(#{1,6})\s+(.+)$/
  const headings: Array<{ level: number; text: string; id: string }> = []

  const lines = content.split("\n").map(line => line.trim())
  for (const line of lines) {
    const match = headingRegex.exec(line)
    if (match) {
      const level = match[1].length
      const text = match[2].trim()
      const id = text
        .toLowerCase()
        .replace(/[^a-z0-9\s]/g, "")
        .replace(/\s+/g, "-")

      headings.push({ level, text, id })
    }
  }

  return headings
}

function generateTocHTML(
  headings: Array<{ level: number; text: string; id: string }>,
) {
  if (headings.length === 0) return ""

  let html = '<nav class="toc"><ul>'
  let currentLevel = headings[0].level

  for (const heading of headings) {
    if (heading.level > currentLevel) {
      for (let i = currentLevel; i < heading.level; i++) {
        html += "<ul>"
      }
    } else if (heading.level < currentLevel) {
      for (let i = heading.level; i < currentLevel; i++) {
        html += "</ul>"
      }
    }

    html += `<li><a href="#${heading.id}">${heading.text}</a></li>`
    currentLevel = heading.level
  }

  html += "</ul></nav>"
  return html
}

let tocHTML = ""
if (currentPost?.body) {
  const headings = generateToc(currentPost.body)
  tocHTML = generateTocHTML(headings)
}
---

{tocHTML && (
  <div id="toc" set:html={tocHTML} />
)}
